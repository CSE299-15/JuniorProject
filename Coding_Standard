# Coding standard ___
Coding standards are collections of rules and guidelines that determine the programming style, procedures, and methods defined for a specific language to be followed for each piece of code in a programming language. These coding standard usually cover organization, indentation comments, declarations, statements, white space, naming conventions, programming practices, programming principles, programming rules of thumb, architectural best practices, etc.

# Purpose of using coding standard____
1)	A coding standard gives a uniform appearance to the codes written by different engineers.
2)	It improves readability, and maintainability of the code and it reduces complexity also.
3)	It helps in code reuse and helps to detect error easily.
4)	It promotes sound programming practices and increases efficiency of the programmers.



# Python Coding standards__
# 	Indentation__

Use of 4-space indentation and no tabs. 
### `For example `
### `def student(name, nid, phone, email):`
### `print(name)`
### `def function_name( variable_one,     variable_two,    variable_three,    variable_four):`
###  `print(variable_one)`

## •	Indentation Following Line Breaks
To read easily and to distinguish between to lines of code a line length is kept to a maximum of 79 characters




# 	Use of Comments

## •	Block Comments

For a small section of code ,They are useful when we have to write several lines of code to perform a single action, such as importing data from a file or updating a database entry. They are important as they help others understand the purpose and functionality of a given code block.
Start each line with a # followed by a single space.
### `For example__`
###     `# Loop over i ten times and print out the value of i, followed by a`
###     `# new line character`
### `for i in range(0, 10):`
### `print(i, '\n')`

## •	Inline Comments
Inline comments explain a single statement in a piece of code.  inline comments should be on the same line as the statement they refer to.Separated by   by two or more spaces from the statement. Should Start inline comments with a # and a single space, like block comments.
### `For example`
### `x = 5  # This is an inline comment`

#  	Use of spaces  for comma’s___
### ` For comma’s  example__a = f(1, 2) + g(3, 4)`

# 	Naming Conventions 

## •	Choosing  name __Choosing names for our variables, functions, classes, is to use descriptive names to make it clear what the object represents.
### `name = 'John Smith'`
### `first_name, last_name = name.split()`
### `print(last_name, first_name, sep=', ')`

## •	Class Names¬¬___
Class names should normally use the Pascal Casing convention.
### `class friend Request:`
###       `...........`
### `class Friend:`
###       `......`
## •	Exception Names__
Because exceptions should be classes, the class naming convention applies here. However,  the suffix "Error" on our exception names (if the exception actually is an error) will be used.
## •	Function Names
Function names should be lowercase, with words separated by underscores as necessary to improve readability.
For example 
### `def my_function():`
### `print("Hello from a function")`
## •	Variable Names
 A lowercase single letter, word, or words. Separate words with underscores to improve readability..
### `For example__`
### `x, var, my_variable`
## •	method name____
A lowercase word or words.  Words are separated with underscores to improve readability.
### `For example___`
### `class class_name `
###     `def method_name () : `
###         `...... `
###   `method body`

## •	Constant name___
An uppercase single letter, word, or words. Separate words with underscores to improve readability
### `For example_`
### `CONSTANT, MY_CONSTANT, MY_LONG_CONSTANT.`

## •	Module name___
A short, lowercase word or words. Separate words with underscores to improve readability
### `For example__`
### `module.py, my_module.py`

# 	 Imports
Imports should usually be on separate lines.
Imports are always put at the top of the file, just after any module comments and docstrings, and before module globals and constants.
Imports should be grouped in the following order:
1.	Standard library imports.
2.	Related third party imports.
3.	Local application/library specific imports.
### `For example___`
### `import os`
### `import sys`
### `from subprocess import Popen, PIPE`

# 	String Quotes
In Python, single-quoted strings and double-quoted strings are the same.Pick a rule and stick to it.When a string contains single or double quote characters, however, use the other one to avoid backslashes in the string. It improves readability.

# 	Control Structures in Python__
(For making descions ,brancing )
if /if-else /if-elif-el/while/for are used with colon and proper indentation and brancing and break should be used . bracets should not be use at al any cost..
For example 
## •	Selections___
### `a = 33`
### `b = 33`
### `if b > a:`
###   `print("b is greater than a")`
### `elif a == b:`
###   `print("a and b are equal")`
### `•	loops___`
### `i = 1`
### `while i < 6:`
###   `print(i)`
###   `i += 1`
# 	File naming convention in Python___
modules (filenames) should have short, all-lowercase names, and they can contain underscores;
